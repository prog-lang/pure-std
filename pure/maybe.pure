type Maybe t
  := Some t
  | None;

isNone :=
  m ->
    when m is
      None then True
      _ then False

isSome := compose isNone not;

maybe :=
  x -> f -> m ->
    when m is
      Some v then f v,
      _ then x;

unwrap := x -> m -> maybe x id m;

somes := ms -> compose (filter isSome) (map (unwrap default));

prove Maybe is Default where
  default := None;

prove Maybe is Map where
  map := f -> maybe None (compose f Some);
  -- swap := compose first map

prove Maybe is Fold where
  foldl := f -> x -> m -> maybe x (f x) m,
  -- foldr := compose flip foldl
  null := isNone,
  list := maybe Null Cons,
  len := compose list len;
